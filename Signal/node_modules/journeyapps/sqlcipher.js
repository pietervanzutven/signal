(async function () {
    'use strict';

    window.journeyapps = {};

    const storage = Windows.Storage;
    const fse = window.fs_extra

    const SQL = await window.initSqlJs();

    function database(filename, callback) {
        const db = {
            filename: filename,
            timeout: null
        };

        fse.readFile(filename).then(data => {
            let DB;
            if (data) {
                DB = new SQL.Database(data);
            } else {
                DB = new SQL.Database();
            }

            db.parse = args => {
                const request = Array.prototype.slice.call(args, 0);

                const query = request[0];
                let params = request[1];
                let callback = request[2];
                const done = request[3];
                if (callback === undefined) {
                    callback = request[1];
                    params = undefined;
                }

                if (params) {
                    Object.entries(params).forEach(([key, value]) => {
                        if (value === undefined) {
                            params[key] = null;
                        }
                    });
                }

                return {
                    query: query,
                    params: params,
                    callback: callback,
                    done: done
                }
            }

            db.resolve = row => {
                const result = [];
                if (row.length > 0) {
                    for (let i = 0; i < row[0].values.length; i++) {
                        result[i] = {};
                        for (let j = 0; j < row[0].columns.length; j++) {
                            result[i][row[0].columns[j]] = row[0].values[i][j];
                        }
                    }
                }
                return result;
            }

            db.close = DB.close;

            db.run = function () {
                const { query, params, callback } = db.parse(arguments);
                DB.run(query, params);
                db.export();

                if (callback) {
                    callback(null);
                }
            }

            db.each = function () {
                const { query, params, callback, done } = db.parse(arguments);
                DB.each(query, params, callback, done);
                db.export();
            }

            db.exec = function () {
                const { query, params, callback } = db.parse(arguments);
                DB.exec(query, params);
                db.export();

                if (callback) {
                    callback(null);
                }
            }

            db.prepare = function () {
                const { query, params, callback } = db.parse(arguments);
                DB.prepare(query, params);
                db.export();

                if (callback) {
                    callback(null);
                }
            }

            db.get = function () {
                const { query, params, callback } = db.parse(arguments);
                const row = DB.exec(query, params);
                db.export();

                const result = db.resolve(row);
                if (callback) {
                    callback(null, result[0]);
                }
            }

            db.all = function () {
                const { query, params, callback } = db.parse(arguments);
                const row = DB.exec(query, params);
                db.export();

                const result = db.resolve(row);
                if (callback) {
                    callback(null, result);
                }
            }

            db.serialize = callback => callback();

            db.export = () => {
                db.timeout && clearTimeout(db.timeout);
                db.timeout = setTimeout(() => {
                    const buffer = Buffer.from(DB.export());
                    fse.writeFile(db.filename, buffer);
                }, 5000);
            }

            callback();
        });
        return db;
    }

    window.journeyapps.sqlcipher = {
        verbose: () => { },
        Database: database,
    };
})();