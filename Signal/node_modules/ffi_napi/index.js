(function () {
    'use strict';

    window['ffi-napi'] = {
        Library: () => {
            return {
                FFI_ProfileKey_getCommitment: (contents, contentsLength, uuidContents, uuidContentsLength, newContents, newContentsLength) => zkgroup.FFI.ProfileKey_getCommitment(contents.buffer, uuidContents.buffer, newContents.buffer),
                FFI_ProfileKey_getProfileKeyVersion: (contents, contentsLength, uuidContents, uuidContentsLength, newContents, newContentsLength) => zkgroup.FFI.ProfileKey_getProfileKeyVersion(contents.buffer, uuidContents.buffer, newContents.buffer),
                FFI_ProfileKeyCommitment_checkValidContents: (contents, contentsLength) => zkgroup.FFI.ProfileKeyCommitment_checkValidContents(contents.buffer),
                FFI_GroupSecretParams_generateDeterministic: (random, randomLength, newContents, newContentsLength) => zkgroup.FFI.GroupSecretParams_generateDeterministic(random.buffer, newContents.buffer),
                FFI_GroupSecretParams_deriveFromMasterKey: (groupMasterKeyContents, groupMasterKeyContentsLength, newContents, newContentsLength) => zkgroup.FFI.GroupSecretParams_deriveFromMasterKey(groupMasterKeyContents.buffer, newContents.buffer),
                FFI_GroupSecretParams_getMasterKey: (contents, contentsLength, newContents, newContentsLength) => zkgroup.FFI.GroupSecretParams_getMasterKey(contents.buffer, newContents.buffer),
                FFI_GroupSecretParams_getPublicParams: (contents, contentsLength, newContents, newContentsLength) => zkgroup.FFI.GroupSecretParams_getPublicParams(contents.buffer, newContents.buffer),
                FFI_GroupSecretParams_checkValidContents: (contents, contentsLength) => zkgroup.FFI.GroupSecretParams_checkValidContents(contents.buffer),
                FFI_GroupSecretParams_encryptUuid: (groupSecretParamsContents, groupSecretParamsContentsLength, uuidContents, uuidContentsLength, newContents, newContentsLength) => zkgroup.FFI.GroupSecretParams_encryptUuid(groupSecretParamsContents.buffer, uuidContents.buffer, newContents.buffer),
                FFI_GroupSecretParams_decryptUuid: (groupSecretParamsContents, groupSecretParamsContentsLength, uuidCiphertextContents, uuidCiphertextContentsLength, newContents, newContentsLength) => zkgroup.FFI.GroupSecretParams_decryptUuid(groupSecretParamsContents.buffer, uuidCiphertextContents.buffer, newContents.buffer),
                FFI_GroupSecretParams_encryptProfileKey: (groupSecretParamsContents, groupSecretParamsContentsLength, profileKeyContents, profileKeyContentsLength, uuidContents, uuidContentsLength, newContents, newContentsLength) => zkgroup.FFI.GroupSecretParams_encryptProfileKey(groupSecretParamsContents.buffer, profileKeyContents.buffer, uuidContents.buffer, newContents.buffer),
                FFI_GroupSecretParams_decryptProfileKey: (groupSecretParamsContents, groupSecretParamsContentsLength, profileKeyCiphertextContents, profileKeyCiphertextContentsLength, uuidContents, uuidContentsLength, newContents, newContentsLength) => zkgroup.FFI.GroupSecretParams_decryptProfileKey(groupSecretParamsContents.buffer, profileKeyCiphertextContents.buffer, uuidContents.buffer, newContents.buffer),
                FFI_GroupSecretParams_encryptBlobDeterministic: (groupSecretParamsContents, groupSecretParamsContentsLength, random, randomLength, paddedPlaintext, paddedPlaintextLength, newContents, newContentsLength) => zkgroup.FFI.GroupSecretParams_encryptBlobDeterministic(groupSecretParamsContents.buffer, random.buffer, paddedPlaintext.buffer, newContents.buffer),
                FFI_GroupSecretParams_decryptBlob: (groupSecretParamsContents, groupSecretParamsContentsLength, blobCiphertext, blobCiphertextLength, newContents, newContentsLength) => zkgroup.FFI.GroupSecretParams_decryptBlob(groupSecretParamsContents.buffer, blobCiphertext.buffer, newContents.buffer),
                FFI_ServerSecretParams_generateDeterministic: (random, randomLength, newContents, newContentsLength) => zkgroup.FFI.ServerSecretParams_generateDeterministic(random.buffer, newContents.buffer),
                FFI_ServerSecretParams_getPublicParams: (contents, contentsLength, newContents, newContentsLength) => zkgroup.FFI.ServerSecretParams_getPublicParams(contents.buffer, newContents.buffer),
                FFI_ServerSecretParams_signDeterministic: (contents, contentsLength, random, randomLength, message, messageLength, newContents, newContentsLength) => zkgroup.FFI.ServerSecretParams_signDeterministic(contents.buffer, random.buffer, message.buffer, newContents.buffer),
                FFI_ServerSecretParams_checkValidContents: (contents, contentsLength) => zkgroup.FFI.ServerSecretParams_checkValidContents(contents.buffer),
                FFI_ServerPublicParams_receiveAuthCredential: (serverPublicParamsContents, serverPublicParamsContentsLength, uuidContents, uuidContentsLength, redemptionTime, authCredentialResponseContents, authCredentialResponseContentsLength, newContents, newContentsLength) => zkgroup.FFI.ServerPublicParams_receiveAuthCredential(serverPublicParamsContents.buffer, uuidContents.buffer, redemptionTime, authCredentialResponseContents.buffer, newContents.buffer),
                FFI_ServerPublicParams_createAuthCredentialPresentationDeterministic: (serverPublicParamsContents, serverPublicParamsContentsLength, random, randomLength, groupSecretParamsContents, groupSecretParamsContentsLength, authCredentialContents, authCredentialContentsLength, newContents, newContentsLength) => zkgroup.FFI.ServerPublicParams_createAuthCredentialPresentationDeterministic(serverPublicParamsContents.buffer, random.buffer, groupSecretParamsContents.buffer, authCredentialContents.buffer, newContents.buffer),
                FFI_ServerPublicParams_createProfileKeyCredentialRequestContextDeterministic: (serverPublicParamsContents, serverPublicParamsContentsLength, random, randomLength, uuidContents, uuidContentsLength, profileKeyContents, profileKeyContentsLength, newContents, newContentsLength) => zkgroup.FFI.ServerPublicParams_createProfileKeyCredentialRequestContextDeterministic(serverPublicParamsContents.buffer, random.buffer, uuidContents.buffer, profileKeyContents.buffer, newContents.buffer),
                FFI_ServerPublicParams_receiveProfileKeyCredential: (serverPublicParamsContents, serverPublicParamsContentsLength, profileKeyCredentialRequestContextContents, profileKeyCredentialRequestContextContentsLength, profileKeyCredentialResponseContents, profileKeyCredentialResponseContentsLength, newContents, newContentsLength) => zkgroup.FFI.ServerPublicParams_receiveProfileKeyCredential(serverPublicParamsContents.buffer, profileKeyCredentialRequestContextContents.buffer, profileKeyCredentialResponseContents.buffer, newContents.buffer),
                FFI_ServerPublicParams_createProfileKeyCredentialPresentationDeterministic: (serverPublicParamsContents, serverPublicParamsContentsLength, random, randomLength, groupSecretParamsContents, groupSecretParamsContentsLength, profileKeyCredentialContents, profileKeyCredentialContentsLength, newContents, newContentsLength) => zkgroup.FFI.ServerPublicParams_createProfileKeyCredentialPresentationDeterministic(serverPublicParamsContents.buffer, random.buffer, groupSecretParamsContents.buffer, profileKeyCredentialContents.buffer, newContents.buffer),
                FFI_ServerSecretParams_issueAuthCredentialDeterministic: (serverParamContents, serverParamContentsLength, random, randomLength, uuidContents, uuidContentsLength, redemptionTime, newContents, newContentsLength) => zkgroup.FFI.ServerSecretParams_issueAuthCredentialDeterministic(serverParamContents.buffer, random.buffer, uuidContents.buffer, redemptionTime, newContents.buffer),
                FFI_ServerSecretParams_verifyAuthCredentialPresentation: (serverParamContents, serverParamContentsLength, groupPublicContents, groupPublicContentsLength, authCredentialPresentationContents, authCredentialPresentationContentsLength) => zkgroup.FFI.ServerSecretParams_verifyAuthCredentialPresentation(serverParamContents.buffer, groupPublicContents.buffer, authCredentialPresentationContents.buffer),
                FFI_ServerSecretParams_issueProfileKeyCredentialDeterministic: (serverSecretParamsContents, serverSecretParamsContentsLength, random, randomLength, profileKeyCredentialRequestContents, profileKeyCredentialRequestContentsLength, uuidContents, uuidContentsLength, profileKeyCommitmentContents, newContents, newContentsLength) => zkgroup.FFI.ServerSecretParams_issueProfileKeyCredentialDeterministic(serverSecretParamsContents.buffer, random.buffer, profileKeyCredentialRequestContents.buffer, uuidContents.buffer, profileKeyCommitmentContents.buffer, newContents.buffer),
                FFI_ServerSecretParams_verifyProfileKeyCredentialPresentation: (serverSecretParamsContents, serverSecretParamsContentsLength, groupPublicParamsContents, groupPublicParamsContentsLength, profileKeyCredentialPresentationContents, profileKeyCredentialPresentationContentsLength) => zkgroup.FFI.ServerSecretParams_verifyProfileKeyCredentialPresentation(serverSecretParamsContents.buffer, groupPublicParamsContents.buffer, profileKeyCredentialPresentationContents.buffer),
                FFI_GroupPublicParams_getGroupIdentifier: (contents, contentsLength, newContents, newContentsLength) => zkgroup.FFI.GroupPublicParams_getGroupIdentifier(contents.buffer, newContents.buffer),
                FFI_GroupPublicParams_checkValidContents: (contents, contentsLength) => zkgroup.FFI.GroupPublicParams_checkValidContents(contents.buffer),
                FFI_ServerPublicParams_verifySignature: (contents, contentsLength, message, messageLength, notarySignatureContents, notarySignatureContentsLength) => zkgroup.FFI.ServerPublicParams_verifySignature(contents.buffer, message.buffer, notarySignatureContents.buffer),
                FFI_ServerPublicParams_checkValidContents: (contents, contentsLength) => zkgroup.FFI.ServerPublicParams_checkValidContents(contents.buffer),
                FFI_AuthCredentialResponse_checkValidContents: (contents, contentsLength) => zkgroup.FFI.AuthCredentialResponse_checkValidContents(contents.buffer),
                FFI_AuthCredential_checkValidContents: (contents, contentsLength) => zkgroup.FFI.AuthCredential_checkValidContents(contents.buffer),
                FFI_AuthCredentialPresentation_getUuidCiphertext: (contents, contentsLength, newContents, newContentsLength) => zkgroup.FFI.AuthCredentialPresentation_getUuidCiphertext(contents.buffer, newContents.buffer),
                FFI_AuthCredentialPresentation_getRedemptionTime: (contents, contentsLength, newContents, newContentsLength) => zkgroup.FFI.AuthCredentialPresentation_getRedemptionTime(contents.buffer, newContents.buffer),
                FFI_AuthCredentialPresentation_checkValidContents: (contents, contentsLength) => zkgroup.FFI.AuthCredentialPresentation_checkValidContents(contents.buffer),
                FFI_ProfileKeyCredentialRequestContext_getRequest: (contents, contentsLength, newContents, newContentsLength) => zkgroup.FFI.ProfileKeyCredentialRequestContext_getRequest(contents.buffer, newContents.buffer),
                FFI_ProfileKeyCredentialRequestContext_checkValidContents: (contents, contentsLength) => zkgroup.FFI.ProfileKeyCredentialRequestContext_checkValidContents(contents.buffer),
                FFI_ProfileKeyCredentialRequest_checkValidContents: (contents, contentsLength) => zkgroup.FFI.ProfileKeyCredentialRequest_checkValidContents(contents.buffer),
                FFI_ProfileKeyCredentialResponse_checkValidContents: (contents, contentsLength) => zkgroup.FFI.ProfileKeyCredentialResponse_checkValidContents(contents.buffer),
                FFI_ProfileKeyCredential_checkValidContents: (contents, contentsLength) => zkgroup.FFI.ProfileKeyCredential_checkValidContents(contents.buffer),
                FFI_ProfileKeyCredentialPresentation_getUuidCiphertext: (contents, contentsLength, newContents, newContentsLength) => zkgroup.FFI.ProfileKeyCredentialPresentation_getUuidCiphertext(contents.buffer, newContents.buffer),
                FFI_ProfileKeyCredentialPresentation_getProfileKeyCiphertext: (contents, contentsLength, newContents, newContentsLength) => zkgroup.FFI.ProfileKeyCredentialPresentation_getProfileKeyCiphertext(contents.buffer, newContents.buffer),
                FFI_ProfileKeyCredentialPresentation_checkValidContents: (contents, contentsLength) => zkgroup.FFI.ProfileKeyCredentialPresentation_checkValidContents(contents.buffer),
                FFI_UuidCiphertext_checkValidContents: (contents, contentsLength) => zkgroup.FFI.UuidCiphertext_checkValidContents(contents.buffer),
                FFI_ProfileKeyCiphertext_checkValidContents: (contents, contentsLength) => zkgroup.FFI.ProfileKeyCiphertext_checkValidContents(contents.buffer),
            }
        }
    }
})();