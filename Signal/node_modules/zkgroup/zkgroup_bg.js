(function () {
    'use strict';

    window.zkgroup = window.zkgroup || {};
    const exports = window.zkgroup.FFI = {};
    
    const wasm = window.zkgroup.wasm;

    let cachegetUint8Memory0 = null;
    function getUint8Memory0() {
        if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
            cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
        }
        return cachegetUint8Memory0;
    }

    let WASM_VECTOR_LEN = 0;

    function passArray8ToWasm0(arg, malloc) {
        const ptr = malloc(arg.length * 1);
        getUint8Memory0().set(arg, ptr / 1);
        WASM_VECTOR_LEN = arg.length;
        return ptr;
    }
    /**
    * @param {Uint8Array} profileKeyIn
    * @param {Uint8Array} uuidIn
    * @param {Uint8Array} profileKeyCommitmentOut
    * @returns {number}
    */
    function ProfileKey_getCommitment(profileKeyIn, uuidIn, profileKeyCommitmentOut) {
        try {
            var ptr0 = passArray8ToWasm0(profileKeyIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(uuidIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(profileKeyCommitmentOut, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ret = wasm.ProfileKey_getCommitment(ptr0, len0, ptr1, len1, ptr2, len2);
            return ret;
        } finally {
            profileKeyCommitmentOut.set(getUint8Memory0().subarray(ptr2 / 1, ptr2 / 1 + len2));
            wasm.__wbindgen_free(ptr2, len2 * 1);
        }
    }

    /**
    * @param {Uint8Array} profileKeyIn
    * @param {Uint8Array} uuidIn
    * @param {Uint8Array} profileKeyVersionOut
    * @returns {number}
    */
    function ProfileKey_getProfileKeyVersion(profileKeyIn, uuidIn, profileKeyVersionOut) {
        try {
            var ptr0 = passArray8ToWasm0(profileKeyIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(uuidIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(profileKeyVersionOut, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ret = wasm.ProfileKey_getProfileKeyVersion(ptr0, len0, ptr1, len1, ptr2, len2);
            return ret;
        } finally {
            profileKeyVersionOut.set(getUint8Memory0().subarray(ptr2 / 1, ptr2 / 1 + len2));
            wasm.__wbindgen_free(ptr2, len2 * 1);
        }
    }

    /**
    * @param {Uint8Array} profileKeyCommitmentIn
    * @returns {number}
    */
    function ProfileKeyCommitment_checkValidContents(profileKeyCommitmentIn) {
        var ptr0 = passArray8ToWasm0(profileKeyCommitmentIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.ProfileKeyCommitment_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} randomnessIn
    * @param {Uint8Array} groupSecretParamsOut
    * @returns {number}
    */
    function GroupSecretParams_generateDeterministic(randomnessIn, groupSecretParamsOut) {
        try {
            var ptr0 = passArray8ToWasm0(randomnessIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(groupSecretParamsOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.GroupSecretParams_generateDeterministic(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            groupSecretParamsOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} groupMasterKeyIn
    * @param {Uint8Array} groupSecretParamsOut
    * @returns {number}
    */
    function GroupSecretParams_deriveFromMasterKey(groupMasterKeyIn, groupSecretParamsOut) {
        try {
            var ptr0 = passArray8ToWasm0(groupMasterKeyIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(groupSecretParamsOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.GroupSecretParams_deriveFromMasterKey(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            groupSecretParamsOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} groupSecretParamsIn
    * @returns {number}
    */
    function GroupSecretParams_checkValidContents(groupSecretParamsIn) {
        var ptr0 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.GroupSecretParams_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} groupSecretParamsIn
    * @param {Uint8Array} groupMasterKeyOut
    * @returns {number}
    */
    function GroupSecretParams_getMasterKey(groupSecretParamsIn, groupMasterKeyOut) {
        try {
            var ptr0 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(groupMasterKeyOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.GroupSecretParams_getMasterKey(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            groupMasterKeyOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} groupSecretParamsIn
    * @param {Uint8Array} groupPublicParamsOut
    * @returns {number}
    */
    function GroupSecretParams_getPublicParams(groupSecretParamsIn, groupPublicParamsOut) {
        try {
            var ptr0 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(groupPublicParamsOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.GroupSecretParams_getPublicParams(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            groupPublicParamsOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} groupSecretParamsIn
    * @param {Uint8Array} uuidIn
    * @param {Uint8Array} uuidCiphertextOut
    * @returns {number}
    */
    function GroupSecretParams_encryptUuid(groupSecretParamsIn, uuidIn, uuidCiphertextOut) {
        try {
            var ptr0 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(uuidIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(uuidCiphertextOut, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ret = wasm.GroupSecretParams_encryptUuid(ptr0, len0, ptr1, len1, ptr2, len2);
            return ret;
        } finally {
            uuidCiphertextOut.set(getUint8Memory0().subarray(ptr2 / 1, ptr2 / 1 + len2));
            wasm.__wbindgen_free(ptr2, len2 * 1);
        }
    }

    /**
    * @param {Uint8Array} groupSecretParamsIn
    * @param {Uint8Array} uuidCiphertextIn
    * @param {Uint8Array} uuidOut
    * @returns {number}
    */
    function GroupSecretParams_decryptUuid(groupSecretParamsIn, uuidCiphertextIn, uuidOut) {
        try {
            var ptr0 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(uuidCiphertextIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(uuidOut, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ret = wasm.GroupSecretParams_decryptUuid(ptr0, len0, ptr1, len1, ptr2, len2);
            return ret;
        } finally {
            uuidOut.set(getUint8Memory0().subarray(ptr2 / 1, ptr2 / 1 + len2));
            wasm.__wbindgen_free(ptr2, len2 * 1);
        }
    }

    /**
    * @param {Uint8Array} groupSecretParamsIn
    * @param {Uint8Array} profileKeyIn
    * @param {Uint8Array} uuidIn
    * @param {Uint8Array} profileKeyCiphertextOut
    * @returns {number}
    */
    function GroupSecretParams_encryptProfileKey(groupSecretParamsIn, profileKeyIn, uuidIn, profileKeyCiphertextOut) {
        try {
            var ptr0 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(profileKeyIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(uuidIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(profileKeyCiphertextOut, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ret = wasm.GroupSecretParams_encryptProfileKey(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
            return ret;
        } finally {
            profileKeyCiphertextOut.set(getUint8Memory0().subarray(ptr3 / 1, ptr3 / 1 + len3));
            wasm.__wbindgen_free(ptr3, len3 * 1);
        }
    }

    /**
    * @param {Uint8Array} groupSecretParamsIn
    * @param {Uint8Array} profileKeyCiphertextIn
    * @param {Uint8Array} uuidIn
    * @param {Uint8Array} profileKeyOut
    * @returns {number}
    */
    function GroupSecretParams_decryptProfileKey(groupSecretParamsIn, profileKeyCiphertextIn, uuidIn, profileKeyOut) {
        try {
            var ptr0 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(profileKeyCiphertextIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(uuidIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(profileKeyOut, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ret = wasm.GroupSecretParams_decryptProfileKey(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
            return ret;
        } finally {
            profileKeyOut.set(getUint8Memory0().subarray(ptr3 / 1, ptr3 / 1 + len3));
            wasm.__wbindgen_free(ptr3, len3 * 1);
        }
    }

    /**
    * @param {Uint8Array} groupSecretParamsIn
    * @param {Uint8Array} randomnessIn
    * @param {Uint8Array} plaintextIn
    * @param {Uint8Array} blobCiphertextOut
    * @returns {number}
    */
    function GroupSecretParams_encryptBlobDeterministic(groupSecretParamsIn, randomnessIn, plaintextIn, blobCiphertextOut) {
        try {
            var ptr0 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(randomnessIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(plaintextIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(blobCiphertextOut, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ret = wasm.GroupSecretParams_encryptBlobDeterministic(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
            return ret;
        } finally {
            blobCiphertextOut.set(getUint8Memory0().subarray(ptr3 / 1, ptr3 / 1 + len3));
            wasm.__wbindgen_free(ptr3, len3 * 1);
        }
    }

    /**
    * @param {Uint8Array} groupSecretParamsIn
    * @param {Uint8Array} blobCiphertextIn
    * @param {Uint8Array} plaintextOut
    * @returns {number}
    */
    function GroupSecretParams_decryptBlob(groupSecretParamsIn, blobCiphertextIn, plaintextOut) {
        try {
            var ptr0 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(blobCiphertextIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(plaintextOut, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ret = wasm.GroupSecretParams_decryptBlob(ptr0, len0, ptr1, len1, ptr2, len2);
            return ret;
        } finally {
            plaintextOut.set(getUint8Memory0().subarray(ptr2 / 1, ptr2 / 1 + len2));
            wasm.__wbindgen_free(ptr2, len2 * 1);
        }
    }

    /**
    * @param {Uint8Array} randomnessIn
    * @param {Uint8Array} serverSecretParamsOut
    * @returns {number}
    */
    function ServerSecretParams_generateDeterministic(randomnessIn, serverSecretParamsOut) {
        try {
            var ptr0 = passArray8ToWasm0(randomnessIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(serverSecretParamsOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.ServerSecretParams_generateDeterministic(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            serverSecretParamsOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverSecretParamsIn
    * @returns {number}
    */
    function ServerSecretParams_checkValidContents(serverSecretParamsIn) {
        var ptr0 = passArray8ToWasm0(serverSecretParamsIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.ServerSecretParams_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} serverSecretParamsIn
    * @param {Uint8Array} serverPublicParamsOut
    * @returns {number}
    */
    function ServerSecretParams_getPublicParams(serverSecretParamsIn, serverPublicParamsOut) {
        try {
            var ptr0 = passArray8ToWasm0(serverSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(serverPublicParamsOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.ServerSecretParams_getPublicParams(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            serverPublicParamsOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverSecretParamsIn
    * @param {Uint8Array} randomnessIn
    * @param {Uint8Array} messageIn
    * @param {Uint8Array} notarySignatureOut
    * @returns {number}
    */
    function ServerSecretParams_signDeterministic(serverSecretParamsIn, randomnessIn, messageIn, notarySignatureOut) {
        try {
            var ptr0 = passArray8ToWasm0(serverSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(randomnessIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(messageIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(notarySignatureOut, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ret = wasm.ServerSecretParams_signDeterministic(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
            return ret;
        } finally {
            notarySignatureOut.set(getUint8Memory0().subarray(ptr3 / 1, ptr3 / 1 + len3));
            wasm.__wbindgen_free(ptr3, len3 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverPublicParamsIn
    * @param {Uint8Array} uuidIn
    * @param {number} redemptionTimeIn
    * @param {Uint8Array} authCredentialResponseIn
    * @param {Uint8Array} authCredentialOut
    * @returns {number}
    */
    function ServerPublicParams_receiveAuthCredential(serverPublicParamsIn, uuidIn, redemptionTimeIn, authCredentialResponseIn, authCredentialOut) {
        try {
            var ptr0 = passArray8ToWasm0(serverPublicParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(uuidIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(authCredentialResponseIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(authCredentialOut, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ret = wasm.ServerPublicParams_receiveAuthCredential(ptr0, len0, ptr1, len1, redemptionTimeIn, ptr2, len2, ptr3, len3);
            return ret;
        } finally {
            authCredentialOut.set(getUint8Memory0().subarray(ptr3 / 1, ptr3 / 1 + len3));
            wasm.__wbindgen_free(ptr3, len3 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverPublicParamsIn
    * @param {Uint8Array} randomnessIn
    * @param {Uint8Array} groupSecretParamsIn
    * @param {Uint8Array} authCredentialIn
    * @param {Uint8Array} authCredentialPresentationOut
    * @returns {number}
    */
    function ServerPublicParams_createAuthCredentialPresentationDeterministic(serverPublicParamsIn, randomnessIn, groupSecretParamsIn, authCredentialIn, authCredentialPresentationOut) {
        try {
            var ptr0 = passArray8ToWasm0(serverPublicParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(randomnessIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(authCredentialIn, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ptr4 = passArray8ToWasm0(authCredentialPresentationOut, wasm.__wbindgen_malloc);
            var len4 = WASM_VECTOR_LEN;
            var ret = wasm.ServerPublicParams_createAuthCredentialPresentationDeterministic(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);
            return ret;
        } finally {
            authCredentialPresentationOut.set(getUint8Memory0().subarray(ptr4 / 1, ptr4 / 1 + len4));
            wasm.__wbindgen_free(ptr4, len4 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverPublicParamsIn
    * @param {Uint8Array} randomnessIn
    * @param {Uint8Array} uuidIn
    * @param {Uint8Array} profileKeyIn
    * @param {Uint8Array} profileKeyCredentialRequestContextOut
    * @returns {number}
    */
    function ServerPublicParams_createProfileKeyCredentialRequestContextDeterministic(serverPublicParamsIn, randomnessIn, uuidIn, profileKeyIn, profileKeyCredentialRequestContextOut) {
        try {
            var ptr0 = passArray8ToWasm0(serverPublicParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(randomnessIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(uuidIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(profileKeyIn, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ptr4 = passArray8ToWasm0(profileKeyCredentialRequestContextOut, wasm.__wbindgen_malloc);
            var len4 = WASM_VECTOR_LEN;
            var ret = wasm.ServerPublicParams_createProfileKeyCredentialRequestContextDeterministic(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);
            return ret;
        } finally {
            profileKeyCredentialRequestContextOut.set(getUint8Memory0().subarray(ptr4 / 1, ptr4 / 1 + len4));
            wasm.__wbindgen_free(ptr4, len4 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverPublicParamsIn
    * @param {Uint8Array} profileKeyCredentialRequestContextIn
    * @param {Uint8Array} profileKeyCredentialResponseIn
    * @param {Uint8Array} profileKeyCredentialOut
    * @returns {number}
    */
    function ServerPublicParams_receiveProfileKeyCredential(serverPublicParamsIn, profileKeyCredentialRequestContextIn, profileKeyCredentialResponseIn, profileKeyCredentialOut) {
        try {
            var ptr0 = passArray8ToWasm0(serverPublicParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(profileKeyCredentialRequestContextIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(profileKeyCredentialResponseIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(profileKeyCredentialOut, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ret = wasm.ServerPublicParams_receiveProfileKeyCredential(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
            return ret;
        } finally {
            profileKeyCredentialOut.set(getUint8Memory0().subarray(ptr3 / 1, ptr3 / 1 + len3));
            wasm.__wbindgen_free(ptr3, len3 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverPublicParamsIn
    * @param {Uint8Array} randomnessIn
    * @param {Uint8Array} groupSecretParamsIn
    * @param {Uint8Array} profileKeyCredentialIn
    * @param {Uint8Array} profileKeyCredentialPresentationOut
    * @returns {number}
    */
    function ServerPublicParams_createProfileKeyCredentialPresentationDeterministic(serverPublicParamsIn, randomnessIn, groupSecretParamsIn, profileKeyCredentialIn, profileKeyCredentialPresentationOut) {
        try {
            var ptr0 = passArray8ToWasm0(serverPublicParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(randomnessIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(groupSecretParamsIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(profileKeyCredentialIn, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ptr4 = passArray8ToWasm0(profileKeyCredentialPresentationOut, wasm.__wbindgen_malloc);
            var len4 = WASM_VECTOR_LEN;
            var ret = wasm.ServerPublicParams_createProfileKeyCredentialPresentationDeterministic(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);
            return ret;
        } finally {
            profileKeyCredentialPresentationOut.set(getUint8Memory0().subarray(ptr4 / 1, ptr4 / 1 + len4));
            wasm.__wbindgen_free(ptr4, len4 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverSecretParamsIn
    * @param {Uint8Array} randomnessIn
    * @param {Uint8Array} uuidIn
    * @param {number} redemptionTimeIn
    * @param {Uint8Array} authCredentialResponseOut
    * @returns {number}
    */
    function ServerSecretParams_issueAuthCredentialDeterministic(serverSecretParamsIn, randomnessIn, uuidIn, redemptionTimeIn, authCredentialResponseOut) {
        try {
            var ptr0 = passArray8ToWasm0(serverSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(randomnessIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(uuidIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(authCredentialResponseOut, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ret = wasm.ServerSecretParams_issueAuthCredentialDeterministic(ptr0, len0, ptr1, len1, ptr2, len2, redemptionTimeIn, ptr3, len3);
            return ret;
        } finally {
            authCredentialResponseOut.set(getUint8Memory0().subarray(ptr3 / 1, ptr3 / 1 + len3));
            wasm.__wbindgen_free(ptr3, len3 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverSecretParamsIn
    * @param {Uint8Array} groupPublicParamsIn
    * @param {Uint8Array} authCredentialPresentationIn
    * @returns {number}
    */
    function ServerSecretParams_verifyAuthCredentialPresentation(serverSecretParamsIn, groupPublicParamsIn, authCredentialPresentationIn) {
        var ptr0 = passArray8ToWasm0(serverSecretParamsIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passArray8ToWasm0(groupPublicParamsIn, wasm.__wbindgen_malloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passArray8ToWasm0(authCredentialPresentationIn, wasm.__wbindgen_malloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.ServerSecretParams_verifyAuthCredentialPresentation(ptr0, len0, ptr1, len1, ptr2, len2);
        return ret;
    }

    /**
    * @param {Uint8Array} serverSecretParamsIn
    * @param {Uint8Array} randomnessIn
    * @param {Uint8Array} profileKeyCredentialRequestIn
    * @param {Uint8Array} uuidIn
    * @param {Uint8Array} profileKeyCommitmentIn
    * @param {Uint8Array} profileKeyCredentialResponseOut
    * @returns {number}
    */
    function ServerSecretParams_issueProfileKeyCredentialDeterministic(serverSecretParamsIn, randomnessIn, profileKeyCredentialRequestIn, uuidIn, profileKeyCommitmentIn, profileKeyCredentialResponseOut) {
        try {
            var ptr0 = passArray8ToWasm0(serverSecretParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(randomnessIn, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passArray8ToWasm0(profileKeyCredentialRequestIn, wasm.__wbindgen_malloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArray8ToWasm0(uuidIn, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ptr4 = passArray8ToWasm0(profileKeyCommitmentIn, wasm.__wbindgen_malloc);
            var len4 = WASM_VECTOR_LEN;
            var ptr5 = passArray8ToWasm0(profileKeyCredentialResponseOut, wasm.__wbindgen_malloc);
            var len5 = WASM_VECTOR_LEN;
            var ret = wasm.ServerSecretParams_issueProfileKeyCredentialDeterministic(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5);
            return ret;
        } finally {
            profileKeyCredentialResponseOut.set(getUint8Memory0().subarray(ptr5 / 1, ptr5 / 1 + len5));
            wasm.__wbindgen_free(ptr5, len5 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverSecretParamsIn
    * @param {Uint8Array} groupPublicParamsIn
    * @param {Uint8Array} profileKeyCredentialPresentationIn
    * @returns {number}
    */
    function ServerSecretParams_verifyProfileKeyCredentialPresentation(serverSecretParamsIn, groupPublicParamsIn, profileKeyCredentialPresentationIn) {
        var ptr0 = passArray8ToWasm0(serverSecretParamsIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passArray8ToWasm0(groupPublicParamsIn, wasm.__wbindgen_malloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passArray8ToWasm0(profileKeyCredentialPresentationIn, wasm.__wbindgen_malloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.ServerSecretParams_verifyProfileKeyCredentialPresentation(ptr0, len0, ptr1, len1, ptr2, len2);
        return ret;
    }

    /**
    * @param {Uint8Array} groupPublicParamsIn
    * @returns {number}
    */
    function GroupPublicParams_checkValidContents(groupPublicParamsIn) {
        var ptr0 = passArray8ToWasm0(groupPublicParamsIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.GroupPublicParams_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} groupPublicParamsIn
    * @param {Uint8Array} groupIdentifierOut
    * @returns {number}
    */
    function GroupPublicParams_getGroupIdentifier(groupPublicParamsIn, groupIdentifierOut) {
        try {
            var ptr0 = passArray8ToWasm0(groupPublicParamsIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(groupIdentifierOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.GroupPublicParams_getGroupIdentifier(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            groupIdentifierOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} serverPublicParamsIn
    * @returns {number}
    */
    function ServerPublicParams_checkValidContents(serverPublicParamsIn) {
        var ptr0 = passArray8ToWasm0(serverPublicParamsIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.ServerPublicParams_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} serverPublicParamsIn
    * @param {Uint8Array} messageIn
    * @param {Uint8Array} notarySignatureIn
    * @returns {number}
    */
    function ServerPublicParams_verifySignature(serverPublicParamsIn, messageIn, notarySignatureIn) {
        var ptr0 = passArray8ToWasm0(serverPublicParamsIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passArray8ToWasm0(messageIn, wasm.__wbindgen_malloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passArray8ToWasm0(notarySignatureIn, wasm.__wbindgen_malloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.ServerPublicParams_verifySignature(ptr0, len0, ptr1, len1, ptr2, len2);
        return ret;
    }

    /**
    * @param {Uint8Array} authCredentialResponseIn
    * @returns {number}
    */
    function AuthCredentialResponse_checkValidContents(authCredentialResponseIn) {
        var ptr0 = passArray8ToWasm0(authCredentialResponseIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.AuthCredentialResponse_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} authCredentialIn
    * @returns {number}
    */
    function AuthCredential_checkValidContents(authCredentialIn) {
        var ptr0 = passArray8ToWasm0(authCredentialIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.AuthCredential_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} authCredentialPresentationIn
    * @returns {number}
    */
    function AuthCredentialPresentation_checkValidContents(authCredentialPresentationIn) {
        var ptr0 = passArray8ToWasm0(authCredentialPresentationIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.AuthCredentialPresentation_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} authCredentialPresentationIn
    * @param {Uint8Array} uuidCiphertextOut
    * @returns {number}
    */
    function AuthCredentialPresentation_getUuidCiphertext(authCredentialPresentationIn, uuidCiphertextOut) {
        try {
            var ptr0 = passArray8ToWasm0(authCredentialPresentationIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(uuidCiphertextOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.AuthCredentialPresentation_getUuidCiphertext(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            uuidCiphertextOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} authCredentialPresentationIn
    * @param {Uint8Array} redemptionTimeOut
    * @returns {number}
    */
    function AuthCredentialPresentation_getRedemptionTime(authCredentialPresentationIn, redemptionTimeOut) {
        try {
            var ptr0 = passArray8ToWasm0(authCredentialPresentationIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(redemptionTimeOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.AuthCredentialPresentation_getRedemptionTime(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            redemptionTimeOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} profileKeyCredentialRequestContextIn
    * @returns {number}
    */
    function ProfileKeyCredentialRequestContext_checkValidContents(profileKeyCredentialRequestContextIn) {
        var ptr0 = passArray8ToWasm0(profileKeyCredentialRequestContextIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.ProfileKeyCredentialRequestContext_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} profileKeyCredentialRequestContextIn
    * @param {Uint8Array} profileKeyCredentialRequestOut
    * @returns {number}
    */
    function ProfileKeyCredentialRequestContext_getRequest(profileKeyCredentialRequestContextIn, profileKeyCredentialRequestOut) {
        try {
            var ptr0 = passArray8ToWasm0(profileKeyCredentialRequestContextIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(profileKeyCredentialRequestOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.ProfileKeyCredentialRequestContext_getRequest(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            profileKeyCredentialRequestOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} profileKeyCredentialRequestIn
    * @returns {number}
    */
    function ProfileKeyCredentialRequest_checkValidContents(profileKeyCredentialRequestIn) {
        var ptr0 = passArray8ToWasm0(profileKeyCredentialRequestIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.ProfileKeyCredentialRequest_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} profileKeyCredentialResponseIn
    * @returns {number}
    */
    function ProfileKeyCredentialResponse_checkValidContents(profileKeyCredentialResponseIn) {
        var ptr0 = passArray8ToWasm0(profileKeyCredentialResponseIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.ProfileKeyCredentialResponse_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} profileKeyCredentialIn
    * @returns {number}
    */
    function ProfileKeyCredential_checkValidContents(profileKeyCredentialIn) {
        var ptr0 = passArray8ToWasm0(profileKeyCredentialIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.ProfileKeyCredential_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} profileKeyCredentialPresentationIn
    * @returns {number}
    */
    function ProfileKeyCredentialPresentation_checkValidContents(profileKeyCredentialPresentationIn) {
        var ptr0 = passArray8ToWasm0(profileKeyCredentialPresentationIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.ProfileKeyCredentialPresentation_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} profileKeyCredentialPresentationIn
    * @param {Uint8Array} uuidCiphertextOut
    * @returns {number}
    */
    function ProfileKeyCredentialPresentation_getUuidCiphertext(profileKeyCredentialPresentationIn, uuidCiphertextOut) {
        try {
            var ptr0 = passArray8ToWasm0(profileKeyCredentialPresentationIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(uuidCiphertextOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.ProfileKeyCredentialPresentation_getUuidCiphertext(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            uuidCiphertextOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} profileKeyCredentialPresentationIn
    * @param {Uint8Array} profileKeyCiphertextOut
    * @returns {number}
    */
    function ProfileKeyCredentialPresentation_getProfileKeyCiphertext(profileKeyCredentialPresentationIn, profileKeyCiphertextOut) {
        try {
            var ptr0 = passArray8ToWasm0(profileKeyCredentialPresentationIn, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArray8ToWasm0(profileKeyCiphertextOut, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.ProfileKeyCredentialPresentation_getProfileKeyCiphertext(ptr0, len0, ptr1, len1);
            return ret;
        } finally {
            profileKeyCiphertextOut.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));
            wasm.__wbindgen_free(ptr1, len1 * 1);
        }
    }

    /**
    * @param {Uint8Array} uuidCiphertextIn
    * @returns {number}
    */
    function UuidCiphertext_checkValidContents(uuidCiphertextIn) {
        var ptr0 = passArray8ToWasm0(uuidCiphertextIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.UuidCiphertext_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} profileKeyCiphertextIn
    * @returns {number}
    */
    function ProfileKeyCiphertext_checkValidContents(profileKeyCiphertextIn) {
        var ptr0 = passArray8ToWasm0(profileKeyCiphertextIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.ProfileKeyCiphertext_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} randomnessIn
    * @returns {number}
    */
    function Randomness_checkValidContents(randomnessIn) {
        var ptr0 = passArray8ToWasm0(randomnessIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.Randomness_checkValidContents(ptr0, len0);
        return ret;
    }

    /**
    * @param {Uint8Array} uuidIn
    * @returns {number}
    */
    function Uuid_checkValidContents(uuidIn) {
        var ptr0 = passArray8ToWasm0(uuidIn, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.Uuid_checkValidContents(ptr0, len0);
        return ret;
    }
    
    exports.ProfileKey_getCommitment = ProfileKey_getCommitment;
    exports.ProfileKey_getProfileKeyVersion = ProfileKey_getProfileKeyVersion;
    exports.ProfileKeyCommitment_checkValidContents = ProfileKeyCommitment_checkValidContents;
    exports.GroupSecretParams_generateDeterministic = GroupSecretParams_generateDeterministic;
    exports.GroupSecretParams_deriveFromMasterKey = GroupSecretParams_deriveFromMasterKey;
    exports.GroupSecretParams_checkValidContents = GroupSecretParams_checkValidContents;
    exports.GroupSecretParams_getMasterKey = GroupSecretParams_getMasterKey;
    exports.GroupSecretParams_getPublicParams = GroupSecretParams_getPublicParams;
    exports.GroupSecretParams_encryptUuid = GroupSecretParams_encryptUuid;
    exports.GroupSecretParams_decryptUuid = GroupSecretParams_decryptUuid;
    exports.GroupSecretParams_encryptProfileKey = GroupSecretParams_encryptProfileKey;
    exports.GroupSecretParams_decryptProfileKey = GroupSecretParams_decryptProfileKey;
    exports.GroupSecretParams_encryptBlobDeterministic = GroupSecretParams_encryptBlobDeterministic;
    exports.GroupSecretParams_decryptBlob = GroupSecretParams_decryptBlob;
    exports.ServerSecretParams_generateDeterministic = ServerSecretParams_generateDeterministic;
    exports.ServerSecretParams_checkValidContents = ServerSecretParams_checkValidContents;
    exports.ServerSecretParams_getPublicParams = ServerSecretParams_getPublicParams;
    exports.ServerSecretParams_signDeterministic = ServerSecretParams_signDeterministic;
    exports.ServerPublicParams_receiveAuthCredential = ServerPublicParams_receiveAuthCredential;
    exports.ServerPublicParams_createAuthCredentialPresentationDeterministic = ServerPublicParams_createAuthCredentialPresentationDeterministic;
    exports.ServerPublicParams_createProfileKeyCredentialRequestContextDeterministic = ServerPublicParams_createProfileKeyCredentialRequestContextDeterministic;
    exports.ServerPublicParams_receiveProfileKeyCredential = ServerPublicParams_receiveProfileKeyCredential;
    exports.ServerPublicParams_createProfileKeyCredentialPresentationDeterministic = ServerPublicParams_createProfileKeyCredentialPresentationDeterministic;
    exports.ServerSecretParams_issueAuthCredentialDeterministic = ServerSecretParams_issueAuthCredentialDeterministic;
    exports.ServerSecretParams_verifyAuthCredentialPresentation = ServerSecretParams_verifyAuthCredentialPresentation;
    exports.ServerSecretParams_issueProfileKeyCredentialDeterministic = ServerSecretParams_issueProfileKeyCredentialDeterministic;
    exports.ServerSecretParams_verifyProfileKeyCredentialPresentation = ServerSecretParams_verifyProfileKeyCredentialPresentation;
    exports.GroupPublicParams_checkValidContents = GroupPublicParams_checkValidContents;
    exports.GroupPublicParams_getGroupIdentifier = GroupPublicParams_getGroupIdentifier;
    exports.ServerPublicParams_checkValidContents = ServerPublicParams_checkValidContents;
    exports.ServerPublicParams_verifySignature = ServerPublicParams_verifySignature;
    exports.AuthCredentialResponse_checkValidContents = AuthCredentialResponse_checkValidContents;
    exports.AuthCredential_checkValidContents = AuthCredential_checkValidContents;
    exports.AuthCredentialPresentation_checkValidContents = AuthCredentialPresentation_checkValidContents;
    exports.AuthCredentialPresentation_getUuidCiphertext = AuthCredentialPresentation_getUuidCiphertext;
    exports.AuthCredentialPresentation_getRedemptionTime = AuthCredentialPresentation_getRedemptionTime;
    exports.ProfileKeyCredentialRequestContext_checkValidContents = ProfileKeyCredentialRequestContext_checkValidContents;
    exports.ProfileKeyCredentialRequestContext_getRequest = ProfileKeyCredentialRequestContext_getRequest;
    exports.ProfileKeyCredentialRequest_checkValidContents = ProfileKeyCredentialRequest_checkValidContents;
    exports.ProfileKeyCredentialResponse_checkValidContents = ProfileKeyCredentialResponse_checkValidContents;
    exports.ProfileKeyCredential_checkValidContents = ProfileKeyCredential_checkValidContents;
    exports.ProfileKeyCredentialPresentation_checkValidContents = ProfileKeyCredentialPresentation_checkValidContents;
    exports.ProfileKeyCredentialPresentation_getUuidCiphertext = ProfileKeyCredentialPresentation_getUuidCiphertext;
    exports.ProfileKeyCredentialPresentation_getProfileKeyCiphertext = ProfileKeyCredentialPresentation_getProfileKeyCiphertext;
    exports.UuidCiphertext_checkValidContents = UuidCiphertext_checkValidContents;
    exports.ProfileKeyCiphertext_checkValidContents = ProfileKeyCiphertext_checkValidContents;
    exports.Randomness_checkValidContents = Randomness_checkValidContents;
    exports.Uuid_checkValidContents = Uuid_checkValidContents;

})();