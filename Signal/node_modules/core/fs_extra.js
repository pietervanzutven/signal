'use strict';

(function () {
    const storage = Windows.Storage;
    const fileIO = storage.FileIO;
    const localFolder = storage.ApplicationData.current.localFolder;

    const { app } = window.electron;

    window.fs_extra = {
        ensureDir: async (directoryPath) => {
            var uri = new Windows.Foundation.Uri(directoryPath);
            let folder = localFolder;
            const pathParts = uri.absoluteUri.replace(app.getPath(),'').split('/').filter(element => element !== '');
            for (let i = 0; i < pathParts.length; i++) {
                folder = await folder.createFolderAsync(pathParts[i], Windows.Storage.CreationCollisionOption.openIfExists);
            }
            return folder;
        },
        ensureFile: async (filePath) => {
            let fileName, folder;
            if (filePath.includes('/')) {
                const pathParts = filePath.split('/');
                fileName = pathParts.pop();
                folder = await window.fs_extra.ensureDir(pathParts.join('/'));
            } else {
                fileName = filePath;
                folder = localFolder;
            }
            return await folder.createFileAsync(fileName, Windows.Storage.CreationCollisionOption.openIfExists);
        },
        readFile: async (filePath) => {
            const file = await window.fs_extra.ensureFile(filePath);
            const buffer = await fileIO.readBufferAsync(file);
            return Windows.Security.Cryptography.CryptographicBuffer.copyToByteArray(buffer);
        },
        writeFile: async (filePath, buffer) => {
            const data = new Uint8Array(buffer.bytebuffer.toBuffer());
            const file = await window.fs_extra.ensureFile(filePath);
            fileIO.writeBytesAsync(file, data);
        },
        remove: async (filePath) => {
            const file = await window.fs_extra.ensureFile(filePath);
            file.deleteAsync();
        },
    }
})();