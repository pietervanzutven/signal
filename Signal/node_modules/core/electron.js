(function () {
  'use strict';

  const applicationModel = Windows.ApplicationModel;
  const background = applicationModel.Background;
  const foundation = Windows.Foundation;
  const launcher = Windows.System.Launcher;
  const UI = Windows.UI;
  const core = UI.core;
  const viewManagement = UI.ViewManagement;
  const webUIApplication = UI.WebUI.WebUIApplication;

  background.BackgroundExecutionManager.removeAccess();
  for (const iter = background.BackgroundTaskRegistration.allTasks.first(); iter.hasCurrent; iter.moveNext()) {
    const task = iter.current.value;
    task.unregister(true);
  }
  const group = background.BackgroundTaskRegistration.getTaskGroup('Signal');
  if (group) {
    for (const iter = group.allTasks.first(); iter.hasCurrent; iter.moveNext()) {
      const task = iter.current.value;
      task.unregister(true);
    }
  }
  background.BackgroundExecutionManager.requestAccessAsync().then(() => {
    const timeTrigger = background.TimeTrigger(15, false);
    const backGroundTask = background.BackgroundTaskBuilder();
    backGroundTask.name = 'SignalTimeTrigger';
    backGroundTask.taskEntryPoint = 'js\\background_task.js';
    backGroundTask.isNetworkRequested = true;
    backGroundTask.setTrigger(timeTrigger);
    backGroundTask.addCondition(background.SystemCondition(background.SystemConditionType.internetAvailable));
    backGroundTask.register();
  });

  webUIApplication.addEventListener('activated', event => {
    if (event.detail[0].kind === applicationModel.Activation.ActivationKind.protocol) {
      window.fileToken = event.detail[0].uri.query !== '' ? foundation.WwwFormUrlDecoder(event.detail[0].uri.query).getFirstValueByName("file") : null;
    } else if (event.detail[0].kind === applicationModel.Activation.ActivationKind.launch) {
      if (event.detail[0].arguments !== '' && window.notifications[event.detail[0].arguments]) {
        window.notifications[event.detail[0].arguments].click();
      }
    }
  });

  let focused = true;
  webUIApplication.addEventListener('resuming', () => focused = true);
  webUIApplication.addEventListener('suspending', () => focused = false);

  window.matchMedia && window.matchMedia('(max-width: 600px)').addListener(() => {
    const core = Windows.UI.Core;
    const gutter = $('.gutter');
    const conversation = $('.conversation-stack');
    if (window.innerWidth > 600) {
      gutter.show();
      conversation.show();
    } else {
      if (core.SystemNavigationManager.getForCurrentView().appViewBackButtonVisibility === core.AppViewBackButtonVisibility.visible) {
        gutter.hide();
        conversation.show();
      } else {
        gutter.show();
        conversation.hide();
      }
    }
  });

  window.onload = () => {
    storage.onready(() => {
      const color = viewManagement.UISettings().getColorValue(viewManagement.UIColorType.background);
      if (color.b === 255) {
        storage.put('theme-setting', 'light');
      } else {
        storage.put('theme-setting', 'dark');
      }
    });
  }

  window.requestIdleCallback = () => { };
  window.on = window.addEventListener;

  const matchMediaFunction = window.matchMedia;
  window.matchMedia = media => {
    const mm = matchMediaFunction(media);
    mm.addEventListener = mm.addListener;
    mm.removeEventListener = mm.removeListener;
    return mm;
  }

  window.electron = {
    app: {
      getVersion: () => {
        const version = applicationModel.Package.current.id.version;
        return version.major + '.' + version.minor + '.' + version.build
      },
      getPath: () => 'ms-appdata:///local',
      getAppPath: () => 'ms-appx://',
      setAppUserModelId: () => { },
      getLocale: () => Windows.Globalization.ApplicationLanguages.languages[0],
      require: () => {
        return {
          systemPreferences: {
            isDarkMode: () => viewManagement.UISettings().getColorValue(viewManagement.UIColorType.background).b === 255
          }
        }
      },
      relaunch: () => webUIApplication.requestRestartAsync(''),
      quit: () => { }
    },

    screen: {
      getAllDisplays: () => [],
    },

    BrowserWindow(options) {
      this.callbacks = {};
      this.on = (name, callback) => this.callbacks[name] = callback;
      this.once = (name, callback) => this.callbacks[name] = callback;
      this.loadURL = url => {
        if (window.document.body && this.frame) {
          window.document.body.appendChild(this.frame);
          this.frame.onload = () => {
            if (this.callbacks['ready-to-show']) {
              this.callbacks['ready-to-show']();
            }
          };
          this.frame.src = url.replace('file:///', '');
        }
      }
      this.show = () => {
        this.frame.style.visibility = 'visible';
        if (this.closeButton) {
          window.document.body.appendChild(this.closeButton);
        }
      }
      this.flashFrame = () => launcher.launchUriAsync(new foundation.Uri('signal://'));
      this.close = () => {
        if (this.closeButton) {
          document.body.removeChild(this.closeButton);
        }
        if (this.frame) {
          document.body.removeChild(this.frame);
        }
        if (this.callbacks['closed']) {
          this.callbacks['closed']();
        }
      }

      if (options) {
        this.width = Math.min(window.innerWidth, options.width);
        this.height = Math.min(window.innerHeight, options.height);

        this.frame = document.createElement('iframe');
        this.frame.style.position = 'absolute';
        this.frame.style.top = 'calc(50% - ' + this.height / 2 + 'px)';
        this.frame.style.left = 'calc(50% - ' + this.width / 2 + 'px)';
        this.frame.style.height = this.height + 'px';
        this.frame.style.width = this.width + 'px';
        this.frame.style.zIndex = '500';
        this.frame.style.border = 'none';
        this.frame.style.visibility = 'hidden';
      }

      if (options && !options.modal) {
        this.closeButton = document.createElement('a');
        this.closeButton.className = 'x close';
        this.closeButton.href = '#';
        this.closeButton.style.position = 'absolute';
        this.closeButton.style.top = 'calc(50% - ' + (this.height / 2 - 10) + 'px)';
        this.closeButton.style.left = 'calc(50% + ' + (this.width / 2 - 30) + 'px)';
        this.closeButton.style.zIndex = '1000';
        this.closeButton.onclick = this.close;
      }

      this.getSize = () => [window.innerWidth, window.innerHeight];
      this.setAutoHideMenuBar = () => { };
      this.setMenuBarVisibility = () => { };
      this.webContents = window.electron.ipc;
    },

    ipc: {
      events: {},
      on: function (channel, listener) {
        ipc.events[channel] = listener;
      },

      once: function (channel, listener) {
        ipc.events[channel] = function () {
          listener.apply(null, arguments);
          delete ipc.events[channel];
        }
      },
      send: function () {
        let args = Array.prototype.slice.call(arguments, 0);
        const channel = args[0];
        const event = { channel: channel, returnValue: null, sender: { send: ipc.send } };
        args[0] = event;
        if (ipc.events[channel]) {
          ipc.events[channel].apply(null, args);
        } else {
          console.error('IPC channel ' + channel + ' not defined.');
        }
        return event.returnValue;
      },
      sendSync: function () {
        return ipc.send.apply(null, arguments);
      },
      setMaxListeners: function () { }
    },

    Menu: {},

    protocol: {},

    session: {},

    shell: {
      openExternal(url) {
        launcher.launchUriAsync(foundation.Uri(url));
      }
    },

    dialog: {
      showSaveDialog: async function (browserWindow, options) {
        const picker = Windows.Storage.Pickers.FileSavePicker();
        picker.suggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.downloads;
        picker.suggestedFileName = options.defaultPath;
        const fileParts = picker.suggestedFileName.split('.');
        picker.fileTypeChoices.insert('Document', ['.' + fileParts.slice(-1)]);
        const file = await picker.pickSaveFileAsync();
        Windows.Storage.AccessCache.StorageApplicationPermissions.mostRecentlyUsedList.add(file, file.path);
        if (file) {
          return {
            canceled: false,
            filePath: file.path,
          };
        } else {
          return {
            canceled: true,
            filePath: null,
          };
        }
      }
    },

    clipboard: {},

    systemPreferences: { isDarkMode: () => viewManagement.UISettings().getColorValue(viewManagement.UIColorType.background).b !== 255 },

    nativeTheme: {
      shouldUseDarkColors: viewManagement.UISettings().getColorValue(viewManagement.UIColorType.background).b !== 255,
      on: () => { }
    },

    require: () => window.electron,

    getCurrentWindow() {
      return {
        isFocused: () => focused
      }
    }
  };

  window.electron.ipcRenderer = window.electron.ipc;
  window.electron.ipcMain = window.electron.ipc;

  window.electron.remote = window.electron;
})();